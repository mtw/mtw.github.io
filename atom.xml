<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[rna-seq.at]]></title>
  <link href="http://rna-seq.at/atom.xml" rel="self"/>
  <link href="http://rna-seq.at/"/>
  <updated>2015-12-09T18:29:18+01:00</updated>
  <id>http://rna-seq.at/</id>
  <author>
    <name><![CDATA[Michael T. Wolfinger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SHAPE Directed RNA Folding]]></title>
    <link href="http://rna-seq.at/blog/2015/09/02/SHAPE-directed-RNA-folding/"/>
    <updated>2015-09-02T17:13:03+02:00</updated>
    <id>http://rna-seq.at/blog/2015/09/02/SHAPE-directed-RNA-folding</id>
    <content type="html"><![CDATA[<p>With the advent of efficient strategies for experimental RNA structure
validation, especially combination of chemical probing with next-generation
sequencing technologies, came demand to couple experimental data,
e.g. SHAPE reactivities, with in silico RNA structure prediction tools. In
this line, the computational structure prediction is guided by in vitro or
even in vivo probing data.</p>

<p>We have recently implemented three previously published methods for
incorporation of SHAPE probing data into the <em>ViennaRNA Package</em> and
benchmarked prediction results with a set of RNAs with known reference
structures.</p>

<p>Don&rsquo;t miss the <a href="http://bioinformatics.oxfordjournals.org/content/early/2015/09/23/bioinformatics.btv523/suppl/DC1">Supplementary
Data</a>
since it contains extensive coverage of the applied benchmark strategies
and lots of background information.</p>

<p><a href="http://bioinformatics.oxfordjournals.org/content/early/2015/09/23/bioinformatics.btv523.abstract"><strong>SHAPE directed RNA folding</strong></a><br/>
<em>Ronny Lorenz, Dominik Luntzer, Ivo L. Hofacker, Peter F. Stadler, Michael T. Wolfinger</em> <br/>
Bioinformatics 2015 btv523<br/>
<a href="http://dx.doi.org/10.1093/bioinformatics/btv523">DOI: 10.1093/bioinformatics/btv523</a></p>

<h2>Abstract</h2>

<blockquote><p>Summary: Chemical mapping experiments allow for nucleotide resolution
  assessment of RNA structure. We demonstrate that different strategies of
  integrating probing data with thermodynamics-based RNA secondary
  structure prediction algorithms can be implemented by means of soft
  constraints. This amounts to incorporating suitable pseudo-energies into
  the standard energy model for RNA secondary structures. As a showcase
  application for this new feature of the ViennaRNA Package we compare
  three distinct, previously published strategies to utilize SHAPE
  reactivities for structure prediction. The new tool is benchmarked on a
  set of RNAs with known reference structure.</p>

<p>Availability and implementation: The capability for SHAPE directed RNA
  folding is part of the upcoming release of the ViennaRNA Package 2.2, for
  which a preliminary release is already freely available at
  <a href="http://www.tbi.univie.ac.at/RNA">http://www.tbi.univie.ac.at/RNA</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[General and miRNA-mediated mRNA Degradation Occurs on Ribosome Complexes in Drosophila Cells]]></title>
    <link href="http://rna-seq.at/blog/2015/07/30/general-and-miRNA-mediated-mrna-degradation-occurs-on-ribosome-complexes-in-drosophila-cells/"/>
    <updated>2015-07-30T14:03:32+02:00</updated>
    <id>http://rna-seq.at/blog/2015/07/30/general-and-miRNA-mediated-mrna-degradation-occurs-on-ribosome-complexes-in-drosophila-cells</id>
    <content type="html"><![CDATA[<p>mRNA degradation and translation are two processes crucial for
posttranscriptional gene regulation. While the strong interconnection of
mRNA degradation and translation has been noted for many years, it has led
to the hypothesis that mRNAs could be degraded on the ribosome.</p>

<p>We have recently published a study that strongly supports the hypothesis
that the ribosome is a very general site not only for general 5' to 3'
mRNA degradation in <em>Drosophila</em> but also for the miRNA-mediated mRNA
degradation pathway:</p>

<p><a href="http://mcb.asm.org/content/35/13/2309"><strong>General and miRNA-mediated mRNA degradation occurs on ribosome complexes
in Drosophila cells</strong></a><br/>
<em>Sanja Antic, Michael T. Wolfinger, Anna Skucha, Stefanie Hosiner and Silke
Dorner</em> <br/>
Mol. Cell. Biol. 2015 vol. 35 no. 13 2309-2320 <br/>
<a href="http://dx.doi.org/10.1128/MCB.01346-14">DOI: 10.1128/MCB.01346-14</a></p>

<h2>Abstract</h2>

<blockquote><p>The translation and degradation of mRNAs are two key steps in gene
expression that are highly regulated and targeted by many factors,
including microRNAs (miRNAs). While it is well established that translation
and mRNA degradation are tightly coupled, it is still not entirely clear
where in the cell mRNA degradation takes place. In this study, we
investigated the possibility of mRNA degradation on the ribosome in
Drosophila cells. Using polysome profiles and ribosome affinity
purification, we could demonstrate the copurification of various
deadenylation and decapping factors with ribosome complexes. Also, AGO1 and
GW182, two key factors in the miRNA-mediated mRNA degradation pathway, were
associated with ribosome complexes. Their copurification was dependent on
intact mRNAs, suggesting the association of these factors with the mRNA
rather than the ribosome itself. Furthermore, we isolated decapped mRNA
degradation intermediates from ribosome complexes and performed
high-throughput sequencing analysis. Interestingly, 93% of the decapped
mRNA fragments (approximately 12,000) could be detected at the same
relative abundance on ribosome complexes and in cell lysates. In summary,
our findings strongly indicate the association of the majority of bulk
mRNAs as well as mRNAs targeted by miRNAs with the ribosome during their
degradation.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViennaNGS Installation HOWTO]]></title>
    <link href="http://rna-seq.at/blog/2015/03/03/viennangs-installation-howto/"/>
    <updated>2015-03-03T11:45:50+01:00</updated>
    <id>http://rna-seq.at/blog/2015/03/03/viennangs-installation-howto</id>
    <content type="html"><![CDATA[<p><a href="http://search.cpan.org/dist/Bio-ViennaNGS">ViennaNGS</a> is a Perl distribution
for rapid development of next-generation sequencing analysis pipelines. It comes
with a set of modules and <a href="http://moose.iinteractive.com/en/">Moose-based</a>
classes for accomplishing standard and non-standard tasks in NGS processing.
ViennaNGS' feature-richness, however, comes at some cost: dependencies on third
party Perl modules and external tools and libraries, which can be tedious to
install. I have therefore compiled this little <strong>ViennaNGS Installation HOWTO</strong>
to help prospective users getting the software up and running quickly on their
systems.</p>

<p>Let&rsquo;s get started. The installation process provided here has been prepared for
Linux systems, however the steps should be reproducible on MacOS X given that
you have the common GNU tools and  Perl 5.10.0 or higher available, e.g. via
<a href="https://www.macports.org">MacPorts</a>.</p>

<h3>First things first: third party dependencies</h3>

<p><em>ViennaNGS</em> depends on set of third party bioinf tools and libraries, which are
required either for specific filtering and file format conversion tasks or for
building internally used Perl modules. Before continuing with the <em>ViennaNGS</em>
installation, you will need to download and install the following software and
ensure that all executables are accessible to the Perl interpreter:</p>

<ul>
<li>A recent version of <a href="https://github.com/arq5x/bedtools2">bedtools2</a> (latest version as of writing was v2.23)</li>
<li>The <em>bedGraphToBigWig</em> and <em>fetchChromSizes</em> <a href="http://hgdownload.cse.ucsc.edu/admin/exe/">UCSC Genome Browser application binaries</a></li>
<li>The <a href="http://www.r-project.org/">R Statistics Package</a></li>
<li><a href="https://github.com/samtools/samtools/releases/tag/0.1.19">samtools &lt;= v0.1.19</a>. More recent HTSlib-based versions will <strong>not work</strong> with <a href="http://search.cpan.org/~lds/Bio-SamTools/lib/Bio/DB/Sam.pm">Bio::DB::Sam</a></li>
</ul>


<p>The last dependency is in fact a bit peculiar. <em>Bio::DB::Sam</em> up to version
1.41, which we use for all kind of direct BAM manipulation within <em>ViennaNGS</em>,
for some reason will not compile with recent, HTSlib-based versions of
<em>samtools</em>. <em>samtools 0.1.19</em> seems to be the last version that is compatible
with current versions of <em>Bio::DB::Sam</em>. So let&rsquo;s download <em>samtools 0.1.19</em> to
a local folder, say <code>/scratch/software</code>, uncompress the tarball and compile the
samtools library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /scratch/software
</span><span class='line'>cd /scratch/software
</span><span class='line'>wget https://github.com/samtools/samtools/archive/0.1.19.tar.gz
</span><span class='line'>tar xvf 0.1.19.tar.gz
</span><span class='line'>cd samtools-0.1.19
</span><span class='line'>make CFLAGS="-g -O2 -Wall -Wno-unused -Wno-unused-result -fPIC"</span></code></pre></td></tr></table></div></figure>


<p>The extra <code>-Wno*</code> CFLAGS options prevent some unused variable warnings with
recent versions of <em>gcc</em>, whereas the <code>-fPIC</code> CFLAGS option prohibits a
relocation error on x64_64 architectures (see also the <a href="http://cpansearch.perl.org/src/LDS/Bio-SamTools-1.41/README">Bio::DB::Sam
README</a>). If
everything works out fine,  <em>samtools</em> is now compiled, and a static library
file <code>libbam.a</code> will be created in the current working directory. Remember the
absolute path to <code>libbabm.a</code> (in our example this is
<code>/scratch/software/samtools-0.1.19</code>), since we will need this later for
compiling <em>Bio::DB::Sam</em>.</p>

<h3>Setting up a local Perl module directory with cpanminus</h3>

<p>Once all thrid-party dependencies are installed, we can now focus on the Perl
dependencies of <em>ViennaNGS</em>, e.g. the <em>BioPerl</em> suite, the <em>Moose</em> object
framework and many more. Fortunately, installation of custom Perl modules (i.e.
those that are not considered Perl core modules or shipped with a Linux
distribution) is a fairly trivial task these days, thanks to a tool called
<a href="https://cpanmin.us">cpanminus</a>. <em>cpanminus</em> renders installation of a custom
Perl module as easy as typing <code>cpanm</code> and the module&rsquo;s name on the command line.
Moreover, it provides automatic dependency resolution, which comes in handy when
you&rsquo;re installing Perl modules or distributions that depend on other modules,
which again depend on a bunch of modules etc. Forget about the <em>CPAN shell</em> or
<em>cpanplus</em>, use <em>cpanminus</em>.</p>

<p>Before starting with <em>cpanminus</em> we&rsquo;ll need to set a few environment variables
that tell <em>cpanm</em> and the Perl interpreter where to keep and look for locally
installed Perl modules. We&rsquo;ll keep up with the <em>cpanminus</em> default location,
<code>${HOME}/perl5</code> and add the following lines to the end of <code>.bashrc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"
</span><span class='line'>export PERL_MB_OPT="--install_base ${HOME}/perl5"
</span><span class='line'>export PERL5LIB=${HOME}/perl5/lib/perl5:${PERL5LIB}</span></code></pre></td></tr></table></div></figure>


<p>We will also modify our <code>PATH</code> variable to include <code>${HOME}/perl5/bin</code>, where
executable scripts that are shipped with custom Perl modules will be installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=${HOME}/perl5/bin:${PATH}</span></code></pre></td></tr></table></div></figure>


<p>We can now install <em>cpanminus</em>, either the version shipped with our Linux
distribution (example given for Debian/Ubuntu must be executed with root
privileges)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install cpanminus</span></code></pre></td></tr></table></div></figure>


<p>or directly from <a href="https://cpanmin.us">https://cpanmin.us</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://cpanmin.us | perl - App::cpanminus</span></code></pre></td></tr></table></div></figure>


<h3>Installing the ViennaNGS Perl dependencies</h3>

<p>After all we are now ready to install the <em>ViennaNGS</em> Perl dependencies. Let&rsquo;s start with <em>Bio::DB::Sam</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cpanm Bio::DB::Sam</span></code></pre></td></tr></table></div></figure>


<p>Depending on your system setup, <em>cpanm</em> will now start to download and install
all dependencies of <em>Bio::DB::Sam</em> and will then ask for the location of the
static <code>libbam.a</code> library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Configuring Bio-SamTools-1.41 ... Please enter the location of the bam.h and compiled libbam.a files:</span></code></pre></td></tr></table></div></figure>


<p>Our <em>samtools</em> folder is <code>/scratch/software/samtools-0.1.19</code> (see above), so let&rsquo;s enter this here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/scratch/software/samtools-0.1.19</span></code></pre></td></tr></table></div></figure>


<p>This was basically the only module that we had to install manually due to the
<em>samtools</em> location constraint. Actually, we could have installed
<em>Bio::ViennaNGS</em> directly and <em>cpanm</em> would have asked for the <em>samtools</em>
location, but I thought this was a good chance to demonstrate <em>cpanm</em> usage for
didactic reasons.</p>

<h3>Installing Bio::ViennaNGS</h3>

<p>Here comes the easiest part. Since we&rsquo;ve got <code>cpanm</code> up and running on our
system, all we need to type is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cpanm Bio::ViennaNGS</span></code></pre></td></tr></table></div></figure>


<p>and wait for <em>cpanm</em> to install all dependencies and finish. Beware that
<em>ViennaNGS</em> depends on
<a href="http://search.cpan.org/~fangly/Statistics-R/lib/Statistics/R.pm">Statistics::R</a>,
which requires a running installation of the <a href="http://www.r-project.org/">R Statistics
Package</a> on your system. If for any reason <em>cpanm</em>
fails (e.g. R is not available), it will stop and report an error. You can then
install the missing component and call the above command again. Moreover,
whenever there is a new <em>ViennaNGS</em> release available on CPAN, just type <code>cpanm
Bio::ViennaNGS</code> and you&rsquo;ll get the latest version in just a couple of seconds.</p>

<p>Congratulations! You now have a running installation of <em>Bio::ViennaNGS</em>. If you
sticked with the paths in our example, the modules/classes are located in
<code>${HOME}/perl5/lib/perl5/Bio/ViennaNGS/lib</code> and the <em>ViennaNGS utilities</em> can be
found in <code>${HOME}/perl5/bin</code>.</p>

<p>The <em>ViennaNGS</em> authors are looking forward to getting your feedback. Please use
the <a href="https://github.com/mtw/Bio-ViennaNGS/issues">ViennaNGS GitHub Issue
Tracker</a> for reporting bugs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViennaNGS: A Toolbox for Building Efficient Next-generation Sequencing Analysis Pipelines]]></title>
    <link href="http://rna-seq.at/blog/2015/03/02/viennangs-a-toolbox-for-building-efficient-next-generation-sequencing-analysis-pipelines/"/>
    <updated>2015-03-02T21:58:01+01:00</updated>
    <id>http://rna-seq.at/blog/2015/03/02/viennangs-a-toolbox-for-building-efficient-next-generation-sequencing-analysis-pipelines</id>
    <content type="html"><![CDATA[<p><strong>ViennaNGS</strong>  is a Perl distribution for building efficient NGS data and
analysis pipelines, integrating high-level routines and wrapper functions for
common NGS processing tasks. While ViennaNGS is not an established pipeline per
se, it provides tools and functionality for the development of custom NGS
pipelines in Perl. ViennaNGS comes with a set of utility scripts that serve as
reference implementation for most library functions and can readily be applied
for specific tasks or integrated as-is into custom pipelines.</p>

<p>ViennaNGS covers a broad range of NGS data processing tasks, including
functionality for extracting and converting features from common NGS file
formats, computation and evaluation of read mapping statistics, quantification
and normalization of read count data, identification and characterization of
splice junctions from RNA-seq data, parsing and condensing sequence motif data,
automated construction of Assembly and Track Hubs for the UCSC genome browser
and wrapper routines for a set of commonly used NGS command line tools.</p>

<p>We have recently published the <strong>ViennaNGS</strong> paper at F1000Research:</p>

<p><a href="http://f1000research.com/articles/4-50"><strong>ViennaNGS: A toolbox for building efficient next-generation sequencing
analysis pipelines</strong></a><br/>
<em>Michael T. Wolfinger, Jörg Fallmann, Florian Eggenhofer, Fabian Amman</em><br/>
F1000Research 2015,4:50<br/>
<a href="http://dx.doi.org/10.12688/f1000research.6157.1">DOI: 10.12688/f1000research.6157.1</a></p>

<p>The ViennaNGS suite is available through Github
(<a href="https://github.com/mtw/Bio-ViennaNGS">https://github.com/mtw/Bio-ViennaNGS</a>) and CPAN
(<a href="http://search.cpan.org/dist/Bio-ViennaNGS">http://search.cpan.org/dist/Bio-ViennaNGS</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory-efficient RNA Energy Landscape Exploration]]></title>
    <link href="http://rna-seq.at/blog/2014/06/12/memory-efficient-RNA-energy-landscape-exploration/"/>
    <updated>2014-06-12T17:13:32+02:00</updated>
    <id>http://rna-seq.at/blog/2014/06/12/memory-efficient-RNA-energy-landscape-exploration</id>
    <content type="html"><![CDATA[<p>Discrete energy landscapes provide a valuable means for analyzing
non-equilibrium properties of biopolymers. RNA folding dynamics, for
example, can be described by a continuous-time Markov process at the level
of local minima, their corresponding basins of attraction and saddle points
connecting them.</p>

<p>A connected set of structures, often denoted <em>state space</em> is required for
energy landscape construction. While complete suboptimal folding of RNA is
practically impossible for chain lengths above 100nt, alternative
strategies to enumerate the lower part of the energy landscape emerged over
the last years.</p>

<p>We have recently extended previous work on global flooding by a local
flooding approach that minimizes memory consumption and published the
method in <em>Bioinformatics</em>.</p>

<p><a href="http://bioinformatics.oxfordjournals.org/content/30/18/2584"><strong>Memory-efficient RNA energy landscape
exploration</strong></a>  <br/>
<em>Martin Mann, Marcel Kucharík, Christoph Flamm, Michael T. Wolfinger</em> <br/>
Bioinformatics 2014 30(18):2584-2591 <br/>
<a href="http://dx.doi.org/doi:10.1093/bioinformatics/btu337">DOI: 10.1093/bioinformatics/btu337</a></p>

<h2>Abstract</h2>

<blockquote><p>Motivation: Energy landscapes provide a valuable means for studying the
  folding dynamics of short RNA molecules in detail by modeling all
  possible structures and their transitions. Higher abstraction levels
  based on a macro-state decomposition of the landscape enable the study of
  larger systems; however, they are still restricted by huge memory
  requirements of exact approaches.</p>

<p>Results: We present a highly parallelizable local enumeration scheme that
  enables the computation of exact macro-state transition models with
  highly reduced memory requirements. The approach is evaluated on RNA
  secondary structure landscapes using a gradient basin definition for
  macro-states. Furthermore, we demonstrate the need for exact transition
  models by comparing two barrier-based approaches, and perform a detailed
  investigation of gradient basins in RNA energy landscapes.</p>

<p>Availability and implementation: Source code is part of the C++ Energy
  Landscape Library available at
  <a href="http://www.bioinf.uni-freiburg.de/Software/">http://www.bioinf.uni-freiburg.de/Software/</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Compute Normalized RNA-seq Expression From Multicov Files]]></title>
    <link href="http://rna-seq.at/blog/2014/04/15/how-to-compute-normalized-rna-seq-expression-from-multicov-files/"/>
    <updated>2014-04-15T00:29:51+02:00</updated>
    <id>http://rna-seq.at/blog/2014/04/15/how-to-compute-normalized-rna-seq-expression-from-multicov-files</id>
    <content type="html"><![CDATA[<p>Whenever it comes to analyzing RNA-seq experiments, there is a need for
comparing expression data at a quantitative level. Consider a scenario
where samples were taken from different conditions and subjected to
Illumina sequencing. Whether those samples were multiplexed or sequenced on
a single lane each, one generally gets a different number of raw reads from
each sample, refelcting experimental and technical biases inherent in the
RNA-seq protocols. Various measures for normalization of RNA-seq samples
have been proposed, the most widely used being RPKM (reads per kilobase per
million). While RPKM tries to account for different sequencing depth by
normalizing by the number of reads sequenced in a specific sample, divided
by 10<sup>6</sup>, this very step causes a systematic bias, as has been shown
recently (see <a href="http://dx.doi.org/10.1007/s12064-012-0162-3">Wagner et al.,Theory Biosci
(2012);131(4):281-5.</a> and <a href="http://dx.doi.org/10.1093/bioinformatics/btp692">Li
et al.,Bioinformatics
(2010);26(4):493-500</a>).</p>

<p>The central point of these papers is to work out an alternative measure for
RNA-seq expression abundance that resembles as closely as possible the
<em>relative molar concentraction</em> (rmc) of each RNA species present in a
sample. It is easy to see that the average rmc across genes has to be a
constant that only depends on the number of genes mapped in an RNA-seq
experiment.</p>

<p>One example of measures that fulfills the invariant average criterion is
<em>Transcript per million</em> (TPM), being defined as
 <img class="center" src="http://rna-seq.at/images/TPM_1.png">
where t_g is a proxy for the number of transcripts that can be explained by
a certain number of mapped reads and T is the sum of all t_g over all
genes. If one is interested in mRNA abundance, the  average TPM - and thus
the average rmc is inversely proportional to the number of features
present in a reference annotation.</p>

<p>Practically, TPM values for individual genes can be computed from read
count tables, ie. tables that give the number of reads overlapping a
specific gene. Typical programs for obtaining read count tables are
<a href="http://www-huber.embl.de/users/anders/HTSeq/doc/count.html">htseq-count</a>
or
<a href="http://bedtools.readthedocs.org/en/latest/content/tools/multicov.html">multiBamCov</a>
(<a href="http://bedtools.readthedocs.org/en/latest/index.html">bedtools</a>
multicov).</p>

<p>I have recently implemented
<a href="https://github.com/mtw/ViennaNGS/blob/master/scripts/normalize_multicov.pl">normalize_multicov.pl</a>,
a tool for computing normalized RNA-seq expression in terms of TPM from
multicov files. It is part of the
<a href="https://github.com/mtw/ViennaNGS">ViennaNGS</a> Perl Modules for NGS analysis
and very easy to use: Just provide it the output of a bedtols multicov run
on your data as well as the read length used for sequencing your samples
and get back a normalized multicov file of your samples in terms of
TPM. That&rsquo;s all &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TSSAR: TSS Annotation Regime for dRNA-seq Data]]></title>
    <link href="http://rna-seq.at/blog/2014/04/13/tssar-tss-annotation-regime-for-drna-seq-data/"/>
    <updated>2014-04-13T22:22:41+02:00</updated>
    <id>http://rna-seq.at/blog/2014/04/13/tssar-tss-annotation-regime-for-drna-seq-data</id>
    <content type="html"><![CDATA[<p>In silico identification of bacterial transcription start sites (TSS) has
been a major challenge for the last years. To address this issue, we have
developped <a href="http://rna.tbi.univie.ac.at/TSSAR">TSSAR</a>, a statistical method
for analyzing dRNA-seq data, together with colleagues from the
Bioinformatics department at the University of Leipzig.</p>

<p>The TSSAR method paper is now out:</p>

<p><a href="http://www.biomedcentral.com/1471-2105/15/89"><strong>TSSAR: TSS annotation regime for dRNA-seq
data</strong></a> <br/>
<em>Fabian Amman, Michael T Wolfinger, Ronny Lorenz, Ivo L Hofacker, Peter F
Stadler, Sven Findeiß</em><br/>
BMC Bioinformatics 2014, 15:89<br/>
<a href="http://dx.doi.org/10.1186/1471-2105-15-89">DOI: 10.1186/1471-2105-15-89</a></p>

<h2>Abstract</h2>

<blockquote><p>Background</p>

<p>Differential RNA sequencing dRNA-seq is a high-throughput screening
technique designed to examine the architecture of bacterial operons in
general and the precise position of transcription start sites (TSS) in
particular. Hitherto, dRNA-seq data were analyzed by visualizing the
sequencing reads mapped to the reference genome and manually annotating
reliable positions. This is very labor intensive and, due to the
subjectivity, biased.</p>

<p>Results</p>

<p>Here, we present <strong>TSSAR</strong>, a tool for automated <em>de-novo</em> TSS annotation
from dRNA-seq data that respects the statistics of dRNA-seq
libraries. <strong>TSSAR</strong> uses the premise that the number of sequencing reads
starting at a certain genomic position within a transcriptional active
region follows a Poisson distribution with a parameter that depends on the
local strength of expression. The differences of two dRNA-seq library
counts thus follow a Skellam distribution. This provides a statistical
basis to identify significantly enriched primary transcripts.</p>

<p>We assessed the performance by analyzing a publicly available dRNA-seq
  data set using <strong>TSSAR</strong> and two simple approaches that utilize
  user-defined score cutoffs. We evaluated the power of reproducing the
  manual TSS annotation. Furthermore, the same data set was used to
  reproduce 74 experimentally validated TSS in <em>H. pylori</em> from reliable
  techniques such as RACE or primer extension. Both analyses showed that
  <strong>TSSAR</strong> outperforms the static cutoff-dependent approaches.</p>

<p>Conclusions</p>

<p>Having an automated and efficient tool for analyzing dRNA-seq data
  facilitates the use of the dRNA-seq technique and promotes its
  application to more sophisticated analysis. For instance, monitoring the
  plasticity and dynamics of the transcriptomal architecture triggered by
  different stimuli and growth conditions becomes possible.</p>

<p>The main asset of a novel tool for dRNA-seq analysis that reaches out to
a broad user community is usability. As such, we provide <strong>TSSAR</strong> both as
intuitive RESTful Web service [<a href="http://rna.tbi.univie.ac.at/TSSAR">http://rna.tbi.univie.ac.at/TSSAR</a>] together
with a set of post-processing and analysis tools, as well as a
stand-alone version for use in high-throughput dRNA-seq data analysis
pipelines.</p>

<p>Keywords</p>

<p>Differential RNA sequencing, dRNA-seq, TSS, Transcription start site
annotation, Transcriptome, RESTful Web service, Next generation sequencing</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tivoli Storage Manager Under Debian 7 Wheezy]]></title>
    <link href="http://rna-seq.at/blog/2013/12/18/tivoli-storage-manager-under-debian-7-wheezy/"/>
    <updated>2013-12-18T22:41:38+01:00</updated>
    <id>http://rna-seq.at/blog/2013/12/18/tivoli-storage-manager-under-debian-7-wheezy</id>
    <content type="html"><![CDATA[<p>I recently had to install <em>IBM&rsquo;s Tivoli Storage Manager (TSM)</em> client under <em>Debian 7</em>. The task seemed straightforward: Download and install the binaries from <a href="http://service.boulder.ibm.com/storage/tivoli-storage-management/maintenance/client/">IBM&rsquo;s Website</a> and you&rsquo;re done. The problem here is that IBM does not provide pre-built debian packages, they just offer rpms of the TSM client. One could of course start to fiddle around with <code>rpm2cpio</code>, but I&rsquo;m not comfortable with that. I&rsquo;d rather use <a href="http://www.univie.ac.at/vsi/backup/tsm-ubuntu.tar.gz">these pre-built binary debian packages</a> (based on TSM client 6.4.0).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ~/Download/TSM
</span><span class='line'>cd ~/Download/TSM
</span><span class='line'>wget http://www.univie.ac.at/vsi/backup/tsm-ubuntu.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>Those .deb packages have an awkward dependency, the i386 version of libstdc++5. If your machine is based on an x86_64 architecture, you might want to add support for i386 architectures by issuing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg --add-architecture i386</span></code></pre></td></tr></table></div></figure>


<p>The remaining installation procedure is straightforward:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libstdc++5:i386 ksh
</span><span class='line'>ls -l | awk '/64/||/BA-/||/BAc/ {print $9}' | xargs -I %s sudo dpkg -i %s</span></code></pre></td></tr></table></div></figure>


<p>The TSM client executable is installed in <code>/opt/tivoli/tsm/client/ba/bin</code>. You might want to copy two config files and edit them to fit your requirements.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/tivoli/tsm/client/ba/bin/
</span><span class='line'>cp dsm.sys.smp dsm.sys
</span><span class='line'>cp dsm.opt.smp dsm.opt</span></code></pre></td></tr></table></div></figure>


<p>My <code>dsm.sys</code> and <code>dsm.opt</code> look like this:</p>

<div><script src='https://gist.github.com/8031289.js'></script>
<noscript><pre><code>dateformat 4</code></pre></noscript></div>


<p>See also the German version of the <a href="https://zid.univie.ac.at/support/anleitungen/server-backup/backup/">Linux TSM client documentation</a> at the University of Vienna Computer Center&rsquo;s website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert Raw NGS Data to Fastq Format and Trim Adapters With Cutadapt]]></title>
    <link href="http://rna-seq.at/blog/2013/12/16/convert-raw-ngs-data-to-fastq-format-and-trim-adapters-with-cutadapt/"/>
    <updated>2013-12-16T22:46:06+01:00</updated>
    <id>http://rna-seq.at/blog/2013/12/16/convert-raw-ngs-data-to-fastq-format-and-trim-adapters-with-cutadapt</id>
    <content type="html"><![CDATA[<p>Raw next-generation-sequencing (NGS) data is often shipped in unaligned BAM format, whereas most mappers expect input data in FASTQ format. I&rsquo;ve written a little bash script that does the preprocessing job for paired-end data: Convert raw reads to FASTQ with <a href="http://www.hudsonalpha.org/gsl/information/software/bam2fastq">bam2fastq</a>, trim adapters with <a href="http://code.google.com/p/cutadapt/">cutadapt</a> and perform quality control checks with <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/">FastQC</a>.</p>

<div><script src='https://gist.github.com/7989028.js?file=bam2fastq_cutadapt.sh'></script>
<noscript><pre><code>#!/bin/bash

cutadapt=`which cutadapt`
fastqc=`which fastqc`
bam2fastq=`which bam2fastq`
gzip=`which gzip`
origdir=&quot;.&quot;
results=&quot;cutadapt&quot;
fastqcdir=&quot;${results}/FastQC&quot;
adapter5=&quot;CTACACTCTTTCCCTACACGACGCTCTTCCGATCT&quot;
adapter3=&quot;GATCGGAAGAGCACACGTCTGAACTCCAGTCAC&quot;
inprefix=&quot;C&quot;
outprefix=&quot;D&quot;
samples=6
froms=5
replicates=3
threads=4

if ! [ -d &quot;$results&quot; ];
then
        mkdir -p $results
fi

if ! [ -d &quot;$fastqcdir&quot; ];
then
        mkdir -p $fastqcdir
fi

for s in $(seq $froms $samples)
do
        for r in $(seq 1 $replicates)
        do
        sample=${inprefix}${s}_R${r}
        outsample=${outprefix}${s}_R${r}
        echo &quot;processing $sample&quot;

        # process original BAM file; convert to FASTQ and do QC 
        $bam2fastq -q ${sample}.bam -o ${origdir}/${sample}\#.fastq
        for i  in 1 2
        do
                $fastqc --quiet --noextract -o $fastqcdir -t $threads ${origdir}/${sample}_${i}.fastq &amp;&amp; $gzip -c ${origdir}/${sample}_${i}.fastq &gt; ${origdir}/${sample}_${i}.fq.gz &amp;
        done
        # end procesing original files

        rd1=&quot;${origdir}/${sample}_1.fastq&quot;
        rd2=&quot;${origdir}/${sample}_2.fastq&quot;
        outrd1=&quot;${results}/${outsample}_1.fastq&quot;
        outrd2=&quot;${results}/${outsample}_2.fastq&quot;
        echo &quot;infiles $rd1 &amp;&amp; $rd2&quot;
        echo &quot;outfiles $outrd1 &amp;&amp; $outrd2&quot;
        if ! [ -f &quot;$rd1&quot; ];
        then
                echo &quot;ERROR: $rd1 not available&quot;
        fi
        if ! [ -f &quot;$rd2&quot; ];
        then
                echo &quot;ERROR: $rd2 not available&quot;
        fi
        set -x
        # run cutadapt in paired-end mode
        $cutadapt -q 30 -m 25 -g $adapter5 -a $adapter3 --paired-output tmp.2.fastq -o tmp.1.fastq $rd1 $rd2 1&gt; cutadapt_${sample}.run1.out 2&gt; cutadapt_${sample}.run1.err
        $cutadapt -q 30 -m 25 -g $adapter5 -a $adapter3 --paired-output $outrd1 -o $outrd2 tmp.2.fastq tmp.1.fastq 1&gt; cutadapt_${sample}.run2.out 2&gt; cutadapt_${sample}.run2.err
        # remove temp files
        rm tmp.1.fastq tmp.2.fastq
        # remove original (non-adapter-clipped) FASTQ files
        rm $rd1 $rd2
        # run FastQC and gzip output
        $fastqc --quiet --noextract -o $fastqcdir -t $threads $outrd1 &amp;&amp; $gzip $outrd1 &amp;
        $fastqc --quiet --noextract -o $fastqcdir -t $threads $outrd2 &amp;&amp; $gzip $outrd2 &amp;
        # gzip output
        #$gzip $outrd1 &amp;
        #$gzip $outrd2 &amp;

        set +x
        done
done</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
